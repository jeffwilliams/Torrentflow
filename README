Torrentflow README
------------------

Torrentflow is a web-based torrent client, inspired by TorrentFlux. It uses Rasterbar's 
libtorrent for managing torrents, and so supports the latest torrent features (such as 
UDP trackers).

Torrentflow consists of a daemon that performs the downloading, and a web application
that acts as the user interface.


ACKNOWLEGEMENTS
---------------

Portions of the ruby libtorrent-rasterbar wrapper code is taken from Joshua Bassett's 
libtorrent-ruby package, which was under the BSD license.


DEPENDENCIES:
-------------

Running requires:

  ruby (version 1.8)
  apache2
  libapache2-mod-ruby
  eruby
  libjson-ruby
  libtorrent-rasterbar (version 0.13 or 0.14)

Building requires:

  ruby1.8-dev
  swig 1.3
  make
  g++
  libtorrent-rasterbar-dev (version 0.13 or 0.14)
  libasio-dev (if not installed as part of boost)


BUILDING:
---------

1. Change to the mylibtorrent directory and run ./extconf.rb


INSTALLATION:
-------------

1. Copy the torrentflow directory to the desired installation path. After this step,
   later steps will use TORRENTFLOW_HOME to refer to this path (the path includes the 
   torrentflow/ part).

2. Add the following stanza to /etc/apache2/apache2.conf:

    <IfModule mod_ruby.c>
      # for Apache::ERubyRun
      RubyRequire apache/eruby-run
 
      RubyAddPath TORRENTFLOW_HOME/daemon
      RubyAddPath TORRENTFLOW_HOME/www-lib
   
      # handle *.rhtml as eruby files.
      <Files *.rhtml>
        SetHandler ruby-object
        RubyHandler Apache::ERubyRun.instance
      </Files>
      
      AddType text/html .rhtml
    </IfModule>

  But replace TORRENTFLOW_HOME with the real home. 

  If you want to run multiple separate instances of torrentflow, you must configure the RubyAddPath directives separately
  for the two instances, for example by putting them in Directory containers like so:

    <IfModule mod_ruby.c>
      # for Apache::ERubyRun
      RubyRequire apache/eruby-run
 
      RubyAddPath TORRENTFLOW_HOME/daemon
      RubyAddPath TORRENTFLOW_HOME/www-lib
   
      # handle *.rhtml as eruby files.
      <Files *.rhtml>
        SetHandler ruby-object
        RubyHandler Apache::ERubyRun.instance
      </Files>
      
      AddType text/html .rhtml
    </IfModule>

    <Directory /var/www/torrentflow1>
      <IfModule mod_ruby.c>
        RubyAddPath /home/kanobe/src/torrentflow1/daemon
        RubyAddPath /home/kanobe/src/torrentflow1/www-lib
      </IfModule>
    </Directory>

    <Directory /var/www/torrentflow2>
      <IfModule mod_ruby.c>
        RubyAddPath /home/kanobe/src/torrentflow2/daemon
        RubyAddPath /home/kanobe/src/torrentflow2/www-lib
      </IfModule>
    </Directory>


3. In /etc/apache2/mods-available/dir.conf, add index.rhtml to the DirectoryIndex variable

4. Make a symbolic link from the web-accessible directory under the apache root where 
   you would like torrentflow to be accessible to the www directory of torrentflow. 

   For example, if apache home is /var/www/ and you want to be able to access torrentflow
   as http://host/torrentflow, then:

      cd /var/www/
      ln -s TORRENTFLOW_HOME/www torrentflow 

5. Edit the configuration file torrentflowdeamon.conf and set appropriate settings for the 
   parameters. If you are running multiple instances, make sure each uses a different TCP 
   port number.

RUNNING
-------

1. Change to the directory TORRENTFLOW_HOME/daemon and add some user accounts ./adduser.rb
  
    ./adduser <username> <password>

   If you add more users later, you must restart the daemon for it to detect the changes.

2. Change to the directory TORRENTFLOW_HOME/daemon and start daemon.rb:

    ./daemon.rb

   and let it run in the background. For debugging, pass the -x option to prevent it 
   from daemonizing. The daemon logs to syslog, so check syslog to see if it prints any
   errors.

3. Browse to the torrentflow webpage and login.

